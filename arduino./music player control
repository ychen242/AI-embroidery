#include "Arduino.h"
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
//#include <TensorFlowLite.h>
#include <TensorFlowLite_ESP32.h>
//#include "tensorflow/lite/micro/kernels/micro_ops.h"
//#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"

#include "tensorflow/lite/micro/all_ops_resolver.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/system_setup.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "model.h"

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
BLEDescriptor *pDescr;
BLE2902 *pBLE2902;

bool deviceConnected = false;
bool oldDeviceConnected = false;
uint32_t value = 0;

const int bufferSize = 650;
float bufferXn[bufferSize]; // Buffer to store xn samples
int bufferIndex = 0; // Index to keep track of the buffer position
const float voltageThreshold = 1.2;
const int numPostThresholdSamples = 1150; // Number of samples to collect after the threshold
float an1 = 0;
float bn1 = 0;
float qn1 = 0;
float wn1 = 0;
const int numReadings = 10;

// global variables used for TensorFlow Lite (Micro)
   tflite::ErrorReporter* error_reporter = nullptr;
   const tflite::Model* model = nullptr;
   tflite::MicroInterpreter* interpreter = nullptr;
   TfLiteTensor* input = nullptr;
   TfLiteTensor* output = nullptr;
   // Create an area of memory to use for input, output, and intermediate arrays.
   constexpr int kTensorArenaSize = 20 * 1024;  // I like 20 * 1024;
   uint8_t tensor_arena[kTensorArenaSize];

   #define SERVICE_UUID        "cfc47cd2-4dc5-11ee-be56-0242ac120002"
   #define CHARACTERISTIC_UUID "cfc47cd2-4dc5-11ee-be56-0242ac120003"
   class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
    }
};


// Array to map gesture index to a name
const char* GESTURES[] = {
 "single click",
 "double click",
 "triple click",
 "slide1",
 "slide2",
 "long press"
};
#define NUM_GESTURES (sizeof(GESTURES) / sizeof(GESTURES[0]))


void setup(){
   //Serial.begin(115200);
    //while (!Serial);
    static tflite::MicroErrorReporter micro_error_reporter;
  error_reporter = &micro_error_reporter;  
  // Get the TFL representation of the model byte array
  model = tflite::GetModel(the_model);
  if (model->version() != TFLITE_SCHEMA_VERSION) {
    TF_LITE_REPORT_ERROR(error_reporter,
                         "Model provided is schema version %d not equal "
                         "to supported version %d.",
                         model->version(), TFLITE_SCHEMA_VERSION);
    return;
  }
static tflite::AllOpsResolver resolver;
  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
  
  interpreter = &static_interpreter;

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
  
  if (allocate_status != kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
    return;
  }

  // Obtain pointers to the model's input and output tensors.
  input = interpreter->input(0);
  output = interpreter->output(0); 

  //Create the BLE Device
  BLEDevice::init("ESP32");

  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create a BLE Characteristic
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                   );
  pCharacteristic->addDescriptor(new BLE2902());

  // Start the service
  pService->start();

  // Start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter
  BLEDevice::startAdvertising();
  
  Serial.println("Waiting a client connection to notify...");
}

void loop() {
   if (deviceConnected) { 
  delay(1);
  float z = analogRead(A2) ;
  float t = analogRead(A5) - 158;


  float an = (z * 3.3 * 5) / 1024.0;
  float bn = (t * 3.3 * 5) / 1024.0;
  float qn = 0.969 * qn1 + 0.0155 * an + 0.0155 * an1;
  float wn = 0.969 * wn1 + 0.0155 * bn + 0.0155 * bn1;

  an1 = an;
  qn1 = qn;
  bn1 = bn;
  wn1 = wn;
  float xn = qn - wn;

  bufferXn[bufferIndex] = xn;
  bufferIndex = (bufferIndex + 1) % bufferSize;

  if (fabs(xn) >= voltageThreshold) {
    //Serial.println("Threshold reached!");

    float sumPreThresholdXn = 0.0;
    int countPreThresholdXn = 0;
    bool countPreThresholdXnFlag = false;
    int averageprexn = 0;
    float lastAveragePreThresholdXn = 0.0;
    for (int x = 0; x < bufferSize; x++) {
      int index = (bufferIndex + x) % bufferSize;
      if (bufferXn[index] <= voltageThreshold) {
        sumPreThresholdXn += bufferXn[index];
        countPreThresholdXn++;

        if (countPreThresholdXn % 10 == 0) {
          float averagePreThresholdXn = sumPreThresholdXn / 10.0;
          //Serial.println(countPreThresholdXn / 10 - 1);
Serial.println(averagePreThresholdXn);
input->data.f[countPreThresholdXn / 10 - 1] = averagePreThresholdXn / 12;
          sumPreThresholdXn = 0.0;
          averageprexn++;
          lastAveragePreThresholdXn = averagePreThresholdXn;
          if (averageprexn == 65) { // If we've reached 65 values, stop and reset the flag
        countPreThresholdXnFlag = true;
      } 
        }
      }
    }
      if (averageprexn == 64 && !countPreThresholdXnFlag) {
  Serial.println(lastAveragePreThresholdXn);
  input->data.f[64] =  lastAveragePreThresholdXn/ 15;
}
    float sumPostThresholdXn = 0.0;
    int countPostThresholdXn = 0;
    bool countPostThresholdXnFlag = true;
    int averagepostxn = 0;
    for (int x = 0; x < numPostThresholdSamples; x++) {
      delay(1);
      float z = analogRead(A2) ;
      float t = analogRead(A5) - 158;


      float an = (z * 3.3 * 5) / 1024.0;
      float bn = (t * 3.3 * 5) / 1024.0;
      float qn = 0.969 * qn1 + 0.0155 * an + 0.0155 * an1;
      float wn = 0.969 * wn1 + 0.0155 * bn + 0.0155 * bn1;

      an1 = an;
      qn1 = qn;
      bn1 = bn;
      wn1 = wn;
      float xn = qn - wn;

      sumPostThresholdXn += xn;
      countPostThresholdXn++;

      if (countPostThresholdXn % 10 == 0) {
        float averagePostThresholdXn = sumPostThresholdXn / 10.0;
        //Serial.println(65 + countPostThresholdXn / 10);
        Serial.println(averagePostThresholdXn);
        input->data.f[65 + countPostThresholdXn / 10-1] =  averagePostThresholdXn / 12;
        sumPostThresholdXn = 0.0;
      }
    }

    if (countPostThresholdXn == numPostThresholdSamples) {
      Serial.println();
      
    TfLiteStatus invoke_status = interpreter->Invoke();
    if (invoke_status != kTfLiteOk) {
      Serial.println("Invoke failed!");
      while (1);
    }
    
      for (int i = 0; i < NUM_GESTURES; i++) {
      //Serial.print(GESTURES[i]);
      //Serial.print(": ");
      //Serial.println(output->data.f[i], 6);
    }
      int highestProbabilityIndex = 0;
      float highestProbability = output->data.f[0];
      for (int i = 1; i < NUM_GESTURES; i++) {
        if (output->data.f[i] > highestProbability) {
          highestProbability = output->data.f[i];
          highestProbabilityIndex = i;
        }
      }

      if (deviceConnected) {
        //Send the highest probability gesture as a string over Bluetooth
       pCharacteristic->setValue(GESTURES[highestProbabilityIndex]);
        pCharacteristic->notify();
    }

      //Serial.println("Inference completed");
      //Serial.println();
    }
  }
}
     //disconnecting
    if (!deviceConnected && oldDeviceConnected) {
        delay(500); // give the bluetooth stack the chance to get things ready
        pServer->startAdvertising();// restart advertising
        Serial.println("start advertising");
        oldDeviceConnected = deviceConnected;
    }
    // connecting
    if (deviceConnected && !oldDeviceConnected) {
        // do stuff here on connecting
        oldDeviceConnected = deviceConnected;
        Serial.println("device connected");
   }
}
