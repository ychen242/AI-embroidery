import numpy as np
import serial
from scipy.signal import find_peaks
import matplotlib.pyplot as plt
import cv2

# Replace 'COM3' with the actual serial port name of your Arduino (e.g., 'COM4' on Windows or '/dev/ttyACM0' on Linux)
serial_port = 'COM7'

# Replace 9600 with the baud rate you used in the Arduino sketch
baud_rate = 115200

while True:
    # Open the serial port
    ser = serial.Serial(serial_port, baud_rate)

    # Initialize an empty list to store the collected data
    collected_data = []

    # Initialize the positive_peaks and negative_peaks variables
    positive_peaks = []
    negative_peaks = []

    while True:
        # Read data from the serial port until a newline character is received
        data = ser.readline().decode().strip()

        # Check if the data starts with "averagePreThresholdXn:"
        if data.startswith("averagePreThresholdXn:"):
            # Extract the numerical value from the data
            average_pre_threshold_xn = float(data[len("averagePreThresholdXn:"):])

            # Append the value to the collected_data list
            collected_data.append(average_pre_threshold_xn)
        elif data.startswith("averagePreThresholdHn:"):
            # Extract the numerical value from the data
            average_pre_threshold_hn = float(data[len("averagePreThresholdHn:"):])

            # Append the value to the collected_data list
            collected_data.append(average_pre_threshold_hn)
        # Check if the data starts with "averagePostThresholdXn:"
        elif data.startswith("averagePostThresholdXn:"):
            # Extract the numerical value from the data
            average_post_threshold_xn = float(data[len("averagePostThresholdXn:"):])

            # Append the value to the collected_data list
            collected_data.append(average_post_threshold_xn*2)
        elif data.startswith("averagePostThresholdHn:"):
            # Extract the numerical value from the data
            average_post_threshold_hn = float(data[len("averagePostThresholdHn:"):])

            # Append the value to the collected_data list
            collected_data.append(average_post_threshold_hn)
            # Check if we have collected 180 data points
            if len(collected_data) == 1540:
                test_data = np.array(collected_data, dtype=np.float32)
                # Extract basic features
                maximum_value = np.max(test_data)
                minimum_value = np.min(test_data)
                mean_value = np.mean(test_data)
                median_value = np.median(test_data)
                std_deviation = np.std(test_data)

                # Find the positive peaks in the data with height = 1
                positive_peaks, _ = find_peaks(test_data, height=1)

                # Find the negative peaks in the data with height = -2
                negative_peaks, _ = find_peaks(-test_data, height=1.2)

                print("Maximum Value:", maximum_value)
                print("Minimum Value:", minimum_value)
                print("Mean Value:", mean_value)
                print("Median Value:", median_value)
                print("Standard Deviation:", std_deviation)

                # Get the number of positive and negative peaks
                num_positive_peaks = len(positive_peaks)
                num_negative_peaks = len(negative_peaks)
                print("Number of Positive Peaks:", num_positive_peaks)
                print("Number of Negative Peaks:", num_negative_peaks)

                # Calculate the distances between consecutive positive and negative peaks
                positive_peak_distances = np.diff(positive_peaks)
                negative_peak_distances = np.diff(negative_peaks)

                # Print the distances between consecutive positive and negative peaks
                print("Distances Between Positive Peaks:", positive_peak_distances)
                print("Distances Between Negative Peaks:", negative_peak_distances)
                # Check if all conditions are met
                if (1 <= maximum_value <= 2 and
                        -12 <= minimum_value <= -6 and
                        -0.8 <= mean_value <= -0.2 and
                        -0.2 <= median_value <= 0 and
                        0.5 <= std_deviation <= 1.2 and
                        1 <= num_positive_peaks <= 5 and
                        10 <= num_negative_peaks <= 22):

                    # Calculate the mean distance of negative peaks
                    if num_negative_peaks > 1:
                        mean_distance_negative_peaks = np.mean(negative_peak_distances)
                        if 60 <= mean_distance_negative_peaks <= 90:
                            print("Correct password")
                            image_path = "C:\\New folder\\correct.jpg"
                            image = cv2.imread(image_path)  # Replace "your_image.jpg" with the path to your image
                            cv2.imshow("Password Correct", image)
                            cv2.waitKey(0)  # Wait until a key is pressed
                            cv2.destroyAllWindows()
                        else:
                            print("Incorrect password: Mean distance of negative peaks not in the specified range")
                            print("Wrong password")
                            image_path = "C:\\New folder\\wrong.jpg"
                            image = cv2.imread(image_path)  # Replace "your_image.jpg" with the path to your image
                            cv2.imshow("Password Wrong", image)
                            cv2.waitKey(0)  # Wait until a key is pressed
                            cv2.destroyAllWindows()
                    else:
                        print("Incorrect password: Not enough negative peaks")
                        print("Wrong password")
                        image_path = "C:\\New folder\\wrong.jpg"
                        image = cv2.imread(image_path)  # Replace "your_image.jpg" with the path to your image
                        cv2.imshow("Password Wrong", image)
                        cv2.waitKey(0)  # Wait until a key is pressed
                        cv2.destroyAllWindows()
                else:
                    print("Incorrect password: One or more conditions not met")
                    print("Wrong password")
                    image_path = "C:\\New folder\\wrong.jpg"
                    image = cv2.imread(image_path)  # Replace "your_image.jpg" with the path to your image
                    cv2.imshow("Password Wrong", image)
                    cv2.waitKey(0)  # Wait until a key is pressed
                    cv2.destroyAllWindows()

                # Break out of the inner loop after processing the data
                break

    # Close the serial port when done
    ser.close()
